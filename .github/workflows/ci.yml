name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests
      run: uv run pytest --cov=timeslotassigner --cov-report=xml --cov-report=term-missing

    - name: Run type checking
      run: uv run mypy timeslotassigner

    - name: Run linting
      run: uv run ruff check .

    - name: Run formatting check
      run: uv run ruff format --check .

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

  benchmark:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install uv  
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Run benchmarks
      run: uv run python benchmarks.py

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3  
      with:
        version: "latest"

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Run security checks
      run: uv run ruff check --select S .

    - name: Run bandit security scan
      run: |
        uv add --dev bandit
        uv run bandit -r timeslotassigner/

  docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest" 

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Test documentation examples
      run: |
        uv add --dev doctest
        uv run python -m doctest timeslotassigner/calendar.py -v

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, benchmark, security, docs]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.12  
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Build package
      run: uv build

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv add --dev twine
        uv run twine upload dist/*

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false